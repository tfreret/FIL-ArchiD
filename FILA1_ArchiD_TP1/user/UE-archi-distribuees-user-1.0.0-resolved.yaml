---
openapi: 3.1.0
info:
  title: User API
  description: This is the API of the User service
  contact:
    name: Helene Coullon
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /users:
    get:
      tags:
      - developers
      summary: get all users
      description: return all users
      operationId: get_users
      responses:
        "200":
          description: list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
  /users/{userid}:
    get:
      tags:
      - developers
      summary: get the user from a user id
      description: By passing the id of the user you can get the user
      operationId: get_user_by_id
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: get the right user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: User ID not found
    post:
      tags:
      - admins
      summary: add a user
      description: Adds an user 
      operationId: add_user
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: user to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: an existing item already exists
  /booking/{userid}:
    get:
      tags:
      - developers
      summary: get the bookings from a user id
      description: By passing in the appropriate options, you can get bookings of a user
      operationId: get_booking_for_user
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Bookings of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsUser'
        "400":
          description: bad input parameter
    post:
      tags:
      - admins
      summary: add a booking for a user
      description: Adds a booking for the user, the service showtimes have to be requested to check the validity of the booking that is asked
      operationId: add_booking
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMovie'
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsUser'
        "409":
          description: an existing item already exists
  /lastbooking/{userid}:
    get:
      tags:
      - developers
      summary: get the the last booking from a user id
      description: By passing in the appropriate options, you can get last booking of a user
      operationId: get_last_booking_for_user
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Last booking of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateItem'
        "400":
          description: bad input parameter
  /movies/{userid}:
    get:
      tags:
      - developers
      summary: get all movies
      description: return all moives from a user
      operationId: get_movies_from_user
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of all the movies of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
        "400":
          description: bad input parameter
  /lastmovie/{userid}:
    get:
      tags:
      - developers
      summary: get the the last movie that the user watched
      description: By passing in the appropriate options, you can get the last movie that the user watched
      operationId: get_last_movie_for_user
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Last movie that the user watched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
components:
   schemas:
    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      required:
      - id
      - name
      - last_active
      type: object
      properties:
        id:
          type: string
          example: "chris_rivers"
        name:
          type: string
          example: "Chris Rivers"
        last_activve:
          type: integer
          example: 1360031625
    NewUser:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: "Chris Rivers"
    BookingsUser:
      required:
      - dates
      - userid
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateItem'
    DateItem:
      required:
      - date
      - movies
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movies:
          type: array
          items:
            type: string
            example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6
    NewMovie:
      required:
      - date
      - movieid
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movieid:
          type: string
          example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: number
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
    Movies:
      type: object
      required:
      - allUsers
      properties:
        allUsers:
          type: array
          items:
            $ref: '#/components/schemas/MovieItem'